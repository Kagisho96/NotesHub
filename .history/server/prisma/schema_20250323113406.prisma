// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(uuid())
  email          String            @unique
  password       String
  name           String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  notes          Note[]
  tasks          Task[]
  lectureRecords LectureRecording[]
  comments       Comment[]
  reactions      Reaction[]
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      Tag[]
  comments  Comment[]
  reactions Reaction[]
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  completed   Boolean  @default(false)
  priority    String   @default("medium") // low, medium, high
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  reactions   Reaction[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  notes     Note[]
  createdAt DateTime @default(now())
}

model LectureRecording {
  id          String   @id @default(uuid())
  moduleName  String
  title       String
  recordingUrl String
  description String?
  recordedAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  reactions   Reaction[]
}

// Added models for comments and reactions
model Comment {
  id                String            @id @default(uuid())
  content           String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relations to content types
  note              Note?             @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId            String?
  task              Task?             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId            String?
  lectureRecording  LectureRecording? @relation(fields: [lectureRecordingId], references: [id], onDelete: Cascade)
  lectureRecordingId String?
}

model Reaction {
  id                String            @id @default(uuid())
  type              String            // "like" or "dislike"
  createdAt         DateTime          @default(now())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relations to content types
  note              Note?             @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId            String?
  task              Task?             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId            String?
  lectureRecording  LectureRecording? @relation(fields: [lectureRecordingId], references: [id], onDelete: Cascade)
  lectureRecordingId String?

  @@unique([userId, noteId])
  @@unique([userId, taskId])
  @@unique([userId, lectureRecordingId])
}
